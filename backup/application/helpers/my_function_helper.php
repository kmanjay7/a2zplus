<?phpif(!function_exists('ci')){ 	function ci(){		$ci = & get_instance();		return $ci; 		}}function chk_password_expression($str) {       if (1 !== preg_match("/^.*(?=.{6,})(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).*$/", $str)){        $this->form_validation->set_message('chk_password_expression', '%s must be at least 6 characters and must contain at least one lower case letter, one upper case letter and one digit');        return FALSE;        }else{        return TRUE;        }} function adminlogincheck(){ 	ci()->load->model('secure_admin');	$logincheck  = ci()->secure_admin->secureadmin(); 	if(!$logincheck['checklogin']){ ci()->session->sess_destroy();  redirect('admin/Login'); }  }/* notifications script start */function notifications(){   if(ci()->session->flashdata('error')){       echo ci()->session->flashdata('error');   }else if(ci()->session->flashdata('warning')){       echo ci()->session->flashdata('warning');   }else if(ci()->session->flashdata('success')){       echo ci()->session->flashdata('success');   }}/* notifications script end */function adminfold($path){ return ('/'.$path); }function adminurl($path){ return ('/'.$path); }if(!function_exists('bpview')){ 	function bpview($page, $data = null ){		ci()->load->view( adminfold('bp/includes/htmlstart'),$data);		ci()->load->view( adminfold('bp/includes/allcss'),$data);		ci()->load->view( adminfold('bp/includes/header'),$data);		ci()->load->view( adminfold('bp/'.$page),$data );      }}if(!function_exists('mdview')){ 	function mdview($page, $data = null ){		ci()->load->view( adminfold('md/includes/htmlstart'),$data);		ci()->load->view( adminfold('md/includes/allcss'),$data);		ci()->load->view( adminfold('md/includes/header'),$data);		ci()->load->view( adminfold('md/'.$page),$data );      }}if(!function_exists('adview')){ 	function adview($page, $data = null ){		ci()->load->view( adminfold('ad/includes/htmlstart'),$data);		ci()->load->view( adminfold('ad/includes/allcss'),$data);		ci()->load->view( adminfold('ad/includes/header'),$data);		ci()->load->view( adminfold('ad/'.$page),$data );      }}if(!function_exists('agview')){ 	function agview($page, $data = null ){		ci()->load->view( adminfold('ag/includes/htmlstart'),$data);		ci()->load->view( adminfold('ag/includes/allcss'),$data);		ci()->load->view( adminfold('ag/includes/header'),$data);		ci()->load->view( adminfold('ag/'.$page),$data );      }}/*************************** Curl Section  section start ********************** */	function curlApis($url,$method,$jsonstring = null ,$header = null,$time = null){	if($method == 'POST'){  $jsonstring = json_encode($jsonstring); }	$curl = curl_init();    if(!is_null($time)){ $timeout = $time;}else{ $timeout = 30; }    curl_setopt($curl, CURLOPT_URL, $url);	curl_setopt($curl, CURLOPT_HEADER, FALSE);	curl_setopt($curl, CURLOPT_POST, $method);	if($method == 'POST'){  curl_setopt($curl, CURLOPT_POSTFIELDS, $jsonstring); }	curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);    /*Tell cURL that it should only spend 10 seconds to connect to the URL*/    //curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 20 );    /*A given cURL operation should only take 30 seconds max.*/    curl_setopt($curl, CURLOPT_TIMEOUT, $timeout);    curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);    curl_setopt($curl, CURLOPT_MAXREDIRS, 10 );	curl_setopt($curl, CURLOPT_FOLLOWLOCATION, TRUE); 	if($method == 'POST'){ curl_setopt($curl, CURLOPT_POST, TRUE); }	if(!is_null($header)){ curl_setopt($curl, CURLOPT_HTTPHEADER, $header); }    $jsondata = curl_exec($curl);    curl_close($curl);	$data = json_decode($jsondata, TRUE);	return $data;}	/******************************* Curl Section  section end ********************* */	function checktoken($token){ 	 $token = trim($token);	 $headers = array();	 $output = false;	 $headers['auth'] = '';	 $headers['Auth'] = '';	 $headers = apache_request_headers();	 if(isset($headers['auth']) || isset($headers['Auth'])){     $autht = !empty($headers['auth']) ? $headers['auth'] : $headers['Auth'];	   if( !empty( $autht ) ){	   $data = json_decode( file_get_contents( 'php://input' ), true );		 if(strpos($autht, 'Access-Token=') !== false ){		 $explode = explode('Access-Token=',$autht); 		 $findtoken = trim($explode[1]);			 if( $token == $findtoken && !is_null($data) ){  			 	 $output = true; 			 }else{ $output = false; } 		 }else{ $output = false; }	   }	 }	 	 return $output;}function requestJson($prefix = null){	 $request_data = file_get_contents('php://input');         $requestJson = json_decode($request_data,TRUE); 	 $output = !empty($prefix) ? $requestJson[$prefix] : $requestJson ;	  return  ( !empty($output) && !is_null($output) )  ? $output : '';}if(!function_exists('trimfilter')){function trimfilter($str){	$str = trim($str);	$str = rtrim($str,',');	$str = ltrim($str,',');	return $str;}}if(!function_exists('explodeme')){function explodeme($str,$simbol,$position ){	$str = rtrim($str,$simbol);	$explode = explode($simbol,$str);	return $explode[$position];}}/*** start drop down  function script ****/ 	if(!function_exists('get_dropdowns')){  function get_dropdowns($table,$where = null,$key,$name,$type=false )  {	  if(!is_null($where)){	  $rows=ci()->db->order_by($name.' asc')->get_where($table,$where)->result_array();	  }else{	  $rows=ci()->db->order_by($name.' asc')->get($table)->result_array();	  }	  $return = array();	  $return['']="-- Select ".$type;	  if(!empty($rows))	  { 	  	foreach($rows as $row)		{		 $return[$row[$key]]=$row[$name];		}	  }	 return $return;  }}if(!function_exists('xmltojson')){function xmltojson($xml_string ){	$xml = simplexml_load_string($xml_string);	$json = json_encode($xml);	//$array = json_decode($json,TRUE);	return $json;}}function create_dropdownfrom_array($rows,$keyname,$name,$type = null){	  $return = array();	  $return['']="-- Select ".$type;	  if(!empty($rows)){ 	  	foreach($rows as $row){             if($row[$keyname]){                $return[$row[$keyname]]=$row[$name];            } 		}	  }	 return $return;}function twoDecimal($value){    //$decimal = number_format((float)$value,2,'.','');    $value = (float)$value;    $decimal = bcdiv($value,1,3);	return $decimal;}function checkwallet($array=null){	if(is_null($array)){	$array['userid'] = ci()->session->userdata('id'); 	$array['user_type'] = ci()->session->userdata('user_type'); 	}    $wallet = 0.00;	$url = base_url('webapi/wallet/Walletstatus');	if(!is_null($array)){     $response = curlApis($url,'POST',$array);    if($response['status']){                       	$wallet = twoDecimal($response['data']['wallet']);      }     }    return $wallet;}function txnid(){	$output = time().substr(str_shuffle(str_repeat( strtoupper("abcdefghijklmnopqrstuvwxyz"), 5)), 0, 5);	return $output;}function percentage($value,$percent){	 return ( $value * $percent) / 100;	 } function withnpercent($value,$percent){	 $output = $value + ( $value * $percent) / 100;	  return $output;} function my_pagination( $arr ){ 			$config = array();$segmenturi = isset($arr['segmenturi'])?$arr['segmenturi']:5;$config["base_url"] = $arr['baseurl'];$config["total_rows"] = $arr['total'];$config["per_page"] = $arr['limit'];$config['use_page_numbers'] = TRUE;$config['page_query_string'] = TRUE;$config['num_links'] = $arr['total'];  $config['uri_segment'] = $segmenturi ? ci()->uri->segment($segmenturi) : 5; $config['full_tag_open'] = '<ul class="pagination">';$config['full_tag_close'] = '</ul>';            $config['prev_link'] = '«';$config['prev_tag_open'] = '<li class="page-item">';$config['prev_tag_close'] = '</li>';$config['next_link'] = '»';$config['anchor_class'] = 'class="page-link" ';$config['next_tag_open'] = '<li class="page-item">';$config['next_tag_close'] = '</li>';$config['attributes'] = array('class' => 'page-link');$config['cur_tag_open'] = '<li class="page-item active"><a class="page-link" href="#">';$config['cur_tag_close'] = '</a></li>';$config['num_tag_open'] = '<li class="page-item">';$config['num_tag_close'] = '</li>';ci()->load->library('pagination');ci()->pagination->initialize($config);  return  ci()->pagination->create_links();}function checksenderLimit($sender_id){ 		        $limiturl = APIURL.('webapi/dmtusers/Check_transaction_limit'); 		        $chklimit['sender_id'] = $sender_id; 		        $buffer = curlApis($limiturl,'POST',$chklimit);		        return  $buffer; }function statusbtn_c($status,$type = false){	$output = FALSE;    $status = strtoupper( trim($status) );	if( ($status == 'ACCEPTED') || ($status == 'PENDING' ) ){		$output = 'Processing';		if($type == 'class'){		$output = 'pending_icon';		} 	}else if( ($status == 'FAILURE') || ($status == 'FAILED') ){		$output = 'Failed';		if($type == 'class'){		$output = 'failed_icon';		} 	}else if($status == 'SUCCESS'){		$output = 'Success';		if($type == 'class'){		$output = 'sucess_icon';		} 	}else if($status == 'REFUNDED'){		$output = 'Refunded';		if($type == 'class'){		$output = 'failed_icon';		} 	}else if($status == 'PROCESSED'){        $output = 'Processing';        if($type == 'class'){        $output = 'pending_icon';        }     }else{        $output = $status;        if($type == 'class'){        $output = 'sucess_icon';        }    }return $output;}function convert_number_to_words($number) {       $hyphen      = '-';    $conjunction = ' and ';    $separator   = ', ';    $negative    = 'negative ';    $decimal     = ' point ';    $dictionary  = array(        0                   => 'zero',        1                   => 'one',        2                   => 'two',        3                   => 'three',        4                   => 'four',        5                   => 'five',        6                   => 'six',        7                   => 'seven',        8                   => 'eight',        9                   => 'nine',        10                  => 'ten',        11                  => 'eleven',        12                  => 'twelve',        13                  => 'thirteen',        14                  => 'fourteen',        15                  => 'fifteen',        16                  => 'sixteen',        17                  => 'seventeen',        18                  => 'eighteen',        19                  => 'nineteen',        20                  => 'twenty',        30                  => 'thirty',        40                  => 'fourty',        50                  => 'fifty',        60                  => 'sixty',        70                  => 'seventy',        80                  => 'eighty',        90                  => 'ninety',        100                 => 'hundred',        1000                => 'thousand',        1000000             => 'million',        1000000000          => 'billion',        1000000000000       => 'trillion',        1000000000000000    => 'quadrillion',        1000000000000000000 => 'quintillion'    );       if (!is_numeric($number)) {        return false;    }       if (($number >= 0 && (int) $number < 0) || (int) $number < 0 - PHP_INT_MAX) {        // overflow        trigger_error(            'convert_number_to_words only accepts numbers between -' . PHP_INT_MAX . ' and ' . PHP_INT_MAX,            E_USER_WARNING        );        return false;    }    if ($number < 0) {        return $negative . convert_number_to_words(abs($number));    }       $string = $fraction = null;       if (strpos($number, '.') !== false) {        list($number, $fraction) = explode('.', $number);    }       switch (true) {        case $number < 21:            $string = $dictionary[$number];            break;        case $number < 100:            $tens   = ((int) ($number / 10)) * 10;            $units  = $number % 10;            $string = $dictionary[$tens];            if ($units) {                $string .= $hyphen . $dictionary[$units];            }            break;        case $number < 1000:            $hundreds  = $number / 100;            $remainder = $number % 100;            $string = $dictionary[$hundreds] . ' ' . $dictionary[100];            if ($remainder) {                $string .= $conjunction . convert_number_to_words($remainder);            }            break;        default:            $baseUnit = pow(1000, floor(log($number, 1000)));            $numBaseUnits = (int) ($number / $baseUnit);            $remainder = $number % $baseUnit;            $string = convert_number_to_words($numBaseUnits) . ' ' . $dictionary[$baseUnit];            if ($remainder) {                $string .= $remainder < 100 ? $conjunction : $separator;                $string .= convert_number_to_words($remainder);            }            break;    }       if (null !== $fraction && is_numeric($fraction)) {        $string .= $decimal;        $words = array();        foreach (str_split((string) $fraction) as $number) {            $words[] = $dictionary[$number];        }        $string .= implode(' ', $words);    }       return ucwords($string);}function kycstatus($data){ return ($data == 'pending') ? 'Non KYC' : 'KYC User';}function checkSubscription( $array = null ){ if(!is_null($array)){    $where['id'] = $array['id'];    $rows = ci()->db->get_where('dt_users',$where)->row_array();    $start = date('Y-m-d H:i:s',strtotime($rows['fromdate']));    $end = date('Y-m-d H:i:s',strtotime($rows['todate']));   if( ( $start == '1970-01-01 05:30:00') ){    $out = true;   } else if( (strtotime($start) <= strtotime(date('Y-m-d H:i:s')) ) && ( strtotime($end) >= strtotime(date('Y-m-d H:i:s'))) ){    $out = false;   }else if( ($start < date('Y-m-d H:i:s') ) && ($end < date('Y-m-d H:i:s'))){    $out = true;   }   return $out; }}/*php mailer start */function sendmail($to,$subject,$message ,$file = null,$replyto = null,$from = false,$mailer = false,$cc = false,$bcc = false ){                                $hostname = $_SERVER['HTTP_HOST'];                $ip = gethostbyname($hostname);                if($ip != '127.0.0.1'){                ci()->load->library('email');                                $config['protocol'] = 'smtp';                $config['smtp_host'] = FHOST ;                $config['smtp_user'] = FSERVERUSER ;                $config['smtp_pass'] = FPASSWORD ;                $config['smtp_port'] = 587;                                $config['charset'] = 'utf-8';                 $config['wordwrap'] = TRUE;                $config['wrapchars'] = 76;                $config['priority'] = 1;                $config['mailtype'] = 'html';                //$config['smtp_crypto'] = 'tls';                                                if(!$from){ $from = FROMMAIL ; }                 if(!$mailer){ $mailer = FMAILER ; }                 if(!$cc){ $cc = FCC ; }                 if(!$bcc){ $bcc = '' ; }                                  $bcc = '';                                ci()->email->initialize( $config );                                ci()->email->from( $from, $mailer );                ci()->email->to( $to , $mailer );                !empty($cc) ? ci()->email->cc( $cc , $mailer) : '';                if( !is_null($replyto)){  ci()->email->reply_to($replyto , $mailer ); }                !empty($bcc) ? ci()->email->bcc( $bcc , $mailer) : '';                ci()->email->subject( $subject );                if( !is_null($file)){ ci()->email->attach( $file );}                ci()->email->message( $message );                                if( ci()->email->send() ) {                return true;                } else {                return false;                //ci()->email->print_debugger();                }            }else{ return false;}                }/*php mailer end */function fourDecimal($value){     $value = (float)$value;    $decimal = bcdiv($value,1,4);    return $decimal;} function complaint_status($status,$type = false){   $out = ($type == 'cl')?'cp-bg': 'Complaint';     if( $status == 'y'){ $out = ($type == 'cl')?'cp-warn': 'Pending..'; }   else if( $status == 'n'){ $out = ($type == 'cl')?'': 'Solved'; }    return $out;}function cr_dr($status){  return ($status=='debit')?'-':'';}function kyc_status($actionname){     switch ($actionname){        case '':         return 'otp_verification';         break;        case 'otp_verification':        return 'email_verification';        break;        case 'email_verification':        return 'upload_aadhaar_zip';        break;        case 'upload_aadhaar_zip':        return 'aadhaar_details';        break;        case 'aadhaar_details':        return 'aadhaar_mobile_otp';        break;        case 'aadhaar_mobile_otp':        return 'changepassword';        break;        case 'changepassword':        return 'register_pan';        break;        case 'register_pan':        return 'bank_details';        break;        case 'bank_details':        return 'outlet_photo';        break;        case 'outlet_photo':        return 'video_upload';        break;        case 'video_upload':        return 'onscreening';        break;        case 'onscreening':        return 'choose_plan';        break;        case 'yes':        return 'dashboard';        break;        case 'complete':        return 'dashboard';        break;        default:        return '';     } }